// Code generated by MockGen. DO NOT EDIT.
// Source: singleton_redlock.go

// Package singleton_task is a generated GoMock package.
package singleton_task

import (
	context "context"
	reflect "reflect"
	time "time"

	redislock "github.com/bsm/redislock"
	gomock "github.com/golang/mock/gomock"
)

// MocklockObtainer is a mock of lockObtainer interface.
type MocklockObtainer struct {
	ctrl     *gomock.Controller
	recorder *MocklockObtainerMockRecorder
}

// MocklockObtainerMockRecorder is the mock recorder for MocklockObtainer.
type MocklockObtainerMockRecorder struct {
	mock *MocklockObtainer
}

// NewMocklockObtainer creates a new mock instance.
func NewMocklockObtainer(ctrl *gomock.Controller) *MocklockObtainer {
	mock := &MocklockObtainer{ctrl: ctrl}
	mock.recorder = &MocklockObtainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklockObtainer) EXPECT() *MocklockObtainerMockRecorder {
	return m.recorder
}

// Obtain mocks base method.
func (m *MocklockObtainer) Obtain(ctx context.Context, key string, ttl time.Duration, opt *redislock.Options) (*redislock.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Obtain", ctx, key, ttl, opt)
	ret0, _ := ret[0].(*redislock.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Obtain indicates an expected call of Obtain.
func (mr *MocklockObtainerMockRecorder) Obtain(ctx, key, ttl, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Obtain", reflect.TypeOf((*MocklockObtainer)(nil).Obtain), ctx, key, ttl, opt)
}
